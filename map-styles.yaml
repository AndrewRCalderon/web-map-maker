quiet-la-colors:
    text:
        - &text             '#757575'
    areas:
        - &background       '#efebe7'
        - &land             '#f4f2ed'
        - &forest           '#dee0d5'
        - &grass            '#e9ebe0'   # lighten(@forest, 5%)
        - &park             '#e1e3da'   # lighten(@forest, 3%)
        - &cemetery         '#e4e5dc'
        - &hospital         '#e8e4e8'
        - &school           '#e9e5eb'   # lighten(#D9D5E3, 5%)
        - &stadium          '#d9cdc1'
        - &beach            '#ebe2cd'
        - &runway           '#bfbebd'
        - &aerodrome        '#d6d6d6'
        - &building         '#e6e3df'
        - &building_outline 'rgba(0,0,0,0)'
        - &building_top     'rgba(230,230,230,1)'
        - &earth2_e    '#d8d3ca'           # urban early
        - &earth2_e2   '#d4cfc6'           # urban early fade in
        - &earth2_e3   '#dbd8d3'           # urban early fade in 3
        - &earth2_ev   true                # urban early visibility

        - &water            '#c3d5dd'
        - &residential      '#efede8'   # @land * 0.98
        - &commercial       '#edebe6'   # @land * 0.97
        - &industrial       '#eae6e4'   # @land * 0.96
        - &military         '#e8e4e1'   # @land * 0.95
        - &parking          '#eeeeee'
        - &pedestrian       '#e7e7e7'   # @parking * 0.97
        - &place_of_worship '#e3c5c9'
        - &admin            '#000000'
    borders:
        - &county_brdr      '#8a7c7c'
        - &california_brdr  '#827676'
        - &nation_brdr      '#a7a8ab'
        - &state_brdr       '#cbced1'
    roads:
        - &road             '#c8c8c1'
        - &road_text        '#757575'
        - &rail_line        '#c8c8c1'
        - &aeroway          '#dddddd'

sources:
    mapzen:
        type: TopoJSON
        url: https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles---JwESU
    # counties:
    #     type: GeoJSON
    #     url: counties.geojson


cameras:
    perspective:
        type: flat

styles:
    dashed:
        base: lines
        dash: [1.25, 1.25]
        dash_background_color: red

layers:
    earth:
        data: { source: osm, layer: earth }
        draw:
            polygons:
                order: 0
                color: *background
    ocean-water:
        data: { source: osm, layer: water }
        # don't filter ocean polys because OSM ocean split tiles don't have coherent areas
        filter: { kind: ocean }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: *water
                join: round
        water_boundaries-ocean:
            filter: { boundary: yes, $zoom: { min: 10 } }
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: *water
                    width: [[10,1px],[12,2px]]
                    join: round
    water-not-ocean:
        data: { source: osm, layer: water }
        filter: { not: { kind: [ocean,swimming_pool,playa] }, $zoom: { min: 1 } }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: *water
        inland-water:
            filter:
                all:
                    - kind: [lake, water, riverbank, reservoir, playa]
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 1 },  area: { min: 40000000000 } }
                    - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                    - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                    - { $zoom: { min: 5 },  area: { min: 700000000 } }
                    - { $zoom: { min: 6 },  area: { min: 500000000 } }
                    - { $zoom: { min: 7 },  area: { min: 160000000 } }
                    - { $zoom: { min: 8 },  area: { min: 40000000 } }
                    - { $zoom: { min: 9 },  area: { min: 10000000 } }
                    - { $zoom: { min: 10 }, area: { min: 8000000 } }
                    - { $zoom: { min: 11 }, area: { min: 2000000 } }
                    - { $zoom: { min: 12 }, area: { min: 200000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 2000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    color: *water
        other-water-areas:
            filter: { not: { kind: [lake, water, reservoir, playa] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    color: *water
        playas:
            filter: { kind: playa, $zoom: {min: 6} }
            draw:
                polygons:
                    color: *water
        water_boundaries-not-ocean:
            filter: 
                all:
                    - boundary: yes
                    - $zoom: { min: 13 }
                any:
                    - { $zoom: { min: 13 }, area: { min: 2000 } }
                    - { $zoom: { min: 15 } }
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: *water
                    width: [[13,1.0px],[16,1.5px],[18,2m]]
                    join: round
        river:
            filter: { kind: [river,canal,stream,dam,ditch,drain], $zoom: { min: 13 } }
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: *water
                    width: [[13,0.5px],[14,1.0px],[16,1.5px],[18,4m]]
                    join: round

    swimming-pools:
        data: { source: osm, layer: water }
        filter: { kind:[swimming_pool], $zoom: { min: 15 } }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: *water

    boundaries:
        data: { source: osm, layer: boundaries }
        draw:
            lines:
                order: function() { return feature.sort_key; }
        country:
            filter:
                any:
                    - type: country
                    - kind: nation
                    - admin_level: 2
            draw:
                lines:
                    color: *nation_brdr
                    width: [[1, 0.5px], [2, 1.0px], [4, 1.5px], [9, 2.5px], [14, 3.5px], [16, 4.5px], [17, 14m]]
            water:
                filter: { maritime_boundary: yes }
                draw:
                    lines:
                        visible: false
        region:
            filter:
                any:
                    - type: state
                    # territorial here is probably a hack
                    - kind: [state, department, region, provincial, territorial]
                    - admin_level: 4
            draw:
                lines:
                    color: *state_brdr
                    width: [[2, 0.75px], [3, 1px], [5, 1.5px], [9, 3.5px], [14, 5.5px], [16, 6.5px], [17, 16m]]
            water:
                filter: { maritime_boundary: yes }
                draw:
                    lines:
                        visible: false
            early:
                filter: { scalerank: [0,3,4,5,6,7,8,9,10], $zoom: { max: 8 } }
                draw:
                    lines:
                        visible: false
        # county:
        #     filter:
        #         any:
        #             - admin_level: 6
        #     draw:
        #         lines:
        #             color: *county_brdr
        #             width: [[1, 0.5px], [2, 0.75px], [3, 1px], [5, 1.5px], [9, 3.5px], [14, 5.5px], [16, 6.5px], [17, 16m]]
        #             order: 400
        #     water:
        #         filter: { maritime_boundary: yes }
        #         draw:
        #             lines:
        #                 visible: false
    landuse:
        data: { source: osm, layer: landuse }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
        aerodrome:
            filter: {kind: [aerodrome, apron]}
            draw:
                polygons:
                    color: *industrial
        arena:
            filter: {kind: arena}
            draw:
                polygons:
                    color: *stadium
        beach:
            filter: {kind: beach}
            draw:
                polygons:
                    color: *beach
        cemetery:
            filter: {kind: cemetery}
            draw:
                polygons:
                    color: *cemetery
        college:
            filter: {kind: college}
            draw:
                polygons:
                    color: *school
        commercial:
            filter: {kind: [commercial, retail] }
            draw:
                polygons:
                    color: *commercial
        farm:
            filter: {kind: [farm, farmland, farmyard] }
            draw:
                polygons:
                    color: *land
        footway:
            filter: {kind: footway}
            draw:
                polygons:
                    color: *land
        forest:
            filter: {kind: [forest, wood]}
            draw:
                polygons:
                    color: *forest
        grass:
            filter: {kind: [grass, meadow, scrub]}
            draw:
                polygons:
                    color: *grass
        hospital:
            filter: {kind: hospital}
            draw:
                polygons:
                    color: *hospital
        industrial:
            filter: {kind: [industrial, quarry, substation, wastewater_plant]}
            draw:
                polygons:
                    color: *industrial
        kindergarten:
            filter: {kind: kindergarten}
            draw:
                polygons:
                    color: *school
        military:
            filter: {kind: military}
            draw:
                polygons:
                    color: *military
        park:
            filter: {kind: [ common, dog_park, garden, golf_course, park, protected_area, national_park, nature_reserve,
                playground, pitch, recreation_ground, village_green, zoo] }
            draw:
                polygons:
                    color: *park
        parking:
            filter: {kind: parking }
            draw:
                polygons:
                    color: *parking
        pedestrian:
            filter: {kind: pedestrian}
            draw:
                polygons:
                    color: *pedestrian
        place_of_worship:
            filter: {kind: place_of_worship}
            draw:
                polygons:
                    color: *place_of_worship
        prison:
            filter: {kind: prison}
            draw:
                polygons:
                    color: *industrial
        railway:
            filter: {kind: railway}
            draw:
                polygons:
                    color: *industrial
        residential:
            filter: {kind: residential}
            draw:
                polygons:
                    color: *residential
        school:
            filter: {kind: school}
            draw:
                polygons:
                    color: *school
        sports_center:
            filter: {kind: [sports_center, sports_centre] }
            draw:
                polygons:
                    color: *stadium
        stadium:
            filter: {kind: stadium}
            draw:
                polygons:
                    color: *stadium
        university:
            filter: {kind: university}
            draw:
                polygons:
                    color: *school
        urban_area:
            filter: {kind: "urban area"}
            draw:
                polygons:
                    color: *residential
        wetland:
            filter: {kind: wetland}
            draw:
                polygons:
                    color: *land

    roads:
        data: { source: osm, layer: roads }
        filter:
            not: { kind: rail }
        draw:
            lines:
                interactive: true
                order: function() { return feature.sort_key; }
                cap: round
        highway:
            filter: { kind: highway }
            draw:
                lines:
                    order: 490
                    #cap: [[0,butt],[15,round]]
                    #join: round
                    color: *road
                    width: [[8, 1px], [14, 4.0px], [15, 6.0px], [16, 6.5px], [17, 20m]]
                    cap: round
                    outline:
                        color: *road
                        width: [[9, 0.5px], [12, 1px], [16, 2px], [18, 6px]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    lines:
                        color: *road
                        width: [[9, 1px], [14, 2.5px], [16, 4px], [18, 9m]]
                        cap: butt
                        outline:
                            color: *road
                            width: [[13, 0px], [14, 1px], [18, 1.5px]]
                early_link:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: *road
                            outline:
                                color: *road
            tunnel:
                filter: {is_tunnel: yes, $zoom: {min: 13} }
                draw:
                    lines:
                        color: *road
                        outline:
                            color: *road
            highway_bridge:
                filter: {is_bridge: yes}
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
        major_road:
            filter: { kind: major_road }
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: *road
                    width: [[8, 0.3px], [9, 0.4px], [12, 0.5px], [13, 1px], [14, 1.3px], [15, 2px], [16, 4m]]
        minor_road:
                filter: { kind: minor_road, not: { highway: service } }
                draw:
                    lines:
                        order: function() { return feature.sort_key; }
                        color: *road
                        width: [[13, 0.15px], [14, 0.3px], [15, 0.9px], [16, 2m]]


    # Airports
    aeroways:
        data: { source: osm, layer: roads }
        filter: { aeroway: [runway, taxiway] }
        aeroway_runway:
            filter: { aeroway: runway }
            draw:
                polygons:
                    order: function() { return feature.sort_key; }
                    color: *aeroway
                lines:
                    order: function() { return feature.sort_key; }
                    color: *aeroway
                    width: [[11, 3px], [20, 16px]]
        aeroway_taxiway:
            filter: { aeroway: taxiway }
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: *aeroway
                    width: [[11, 0.5px], [20, 6px]]

    buildings:
        data: { source: osm, layer: buildings }
        filter: { $zoom: { min: 15 }}
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: *building

    subway-light-rail:
        data: { source: mapzen, layer: transit }
        filter: { not: { kind: [platform] }, $zoom: { min: 11 } }
        draw:
            lines:
                interactive: true
                order: function() { return feature.sort_key || 275; }
        railway:
            filter: { kind: [railway,train] }
            draw:
                lines:
                    color: [[14,[0.653,0.758,0.786]], [17,[0.670,0.777,0.807]]]
                    width: [[14,0.4px],[15,0.75px],[16,1.1px],[18,2px],[19,1m]]
        subway:
            filter: { kind: subway }
            draw:
                lines:
                    color: function() {
                        if(feature.colour == 'purple') { return '#BCADD0';}
                        else if (feature.colour == 'red') { return '#DD9894'; }
                        else { return feature.colour; } }
                    offset: [0px,10px]
                    width: [[11,3px],[15,2.5px],[18,5m]]
                    z: function() {
                        if(feature.colour == 'purple') { return 1;}
                        else if (feature.colour == 'red') { return 2; } }
                    cap: round

        light_rail:
            filter: { kind: [light_rail,tram], $zoom: { min: 11 } }
            draw:
                lines:
                    color: function() { 
                        if(feature.colour == '#00A5DB') { return '#A4BED7';}
                        else if (feature.colour == 'blue') { return '#6B9CC2'; }
                        else if (feature.colour == '#FFD700') { return '#FADA85'; }
                        else if (feature.colour == 'green') { return '#759371'; }
                        else { return feature.colour; } }
                    width: [[11,3px],[15,2.5px],[18,5m]]
                    cap: round



    # my-counties:
    #     data: { source: counties, layer: counties }
    #     draw:
    #         polygons:
    #             order: 450
    #             color: *state_brdr
                